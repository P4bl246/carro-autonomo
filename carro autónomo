#include "I2Cdev.h"
#include "MPU6050.h"
#include "Wire.h"
#include "BluetoothSerial.h"
#include "math.h"

int en1 = 26; // avanzar
int en2 = 14; // retroceder
int en3 = 27; // retroceder
int en4 = 12; // avanzar

BluetoothSerial SerialBT;

// Variables para el sensor ultrasonico
int echo = 15;
int trig = 19;

// Variables para medir distancia
int tiempo;
int distancia;

bool verificarDistancia() {
    digitalWrite(trig, HIGH);
    delay(10);
    digitalWrite(trig, LOW);
    tiempo = pulseIn(echo, HIGH);
    distancia = (tiempo * 0.034) / 2;
    Serial.print("Distancia: ");
    Serial.println(distancia);
    SerialBT.print("Distancia: ");
    SerialBT.println(distancia);
    return (distancia > 20 && distancia < 400);
}

// Variables para el MPU6050
MPU6050 sensor;
int16_t gx, gy, gz;

// Inicialización de la posición del carro
float posicionX = 0.0;
float Z2 = 0.0; // Posición actual en el eje Z
//temporizador para tomar datos en base a el timpo 
unsigned long inicio;  // Tiempo de inicio
bool timpoIniciado= false; // Estado del temporizador
float velocidad = 0.5;
int seconds = 0;
bool timpoIniciado2= false; // Estado del temporizador


bool posicion() {
    sensor.getRotation(&gx, &gy, &gz);
    float gz_deg = (gz * 180) / 3.14159; // El factor de escala para obtener grados

    if (gz_deg < -1.0) {
        Z2 -= gz_deg;
    } else if (gz_deg > 1.0) {
        Z2 += gz_deg;
    } else {
        Z2 = 0.0;
    }

    // Primera condición: en1 y en4 activos
    if (digitalRead(en1) > 0 && digitalRead(en4) > 0 && !timpoIniciado) {
        inicio = millis(); 
        timpoIniciado = true;
    }

    // Lógica para el temporizador
    if (timpoIniciado) {
        unsigned long tiempoTranscurrido = millis() - inicio;
        unsigned long intervalos = millis() - inicio; // Corrige 'incio' a 'inicio'
        
        if (intervalos >= 1000) { // Cambia a >= para evitar problemas de sincronización
            int segundos = intervalos / 1000;
            velocidad -= 0.000350;
            intervalos = millis() - inicio; // Reinicia el intervalo
        }
        
        seconds += tiempoTranscurrido / 1000; // Convierte a segundos
    }
    
    // Segunda condición: en2 y en3 activos
    else if (digitalRead(en3) > 0 && digitalRead(en2) > 0 && !timpoIniciado2) {
        inicio = millis(); 
        timpoIniciado2 = true;
    }

    // Lógica para el segundo temporizador
    if (timpoIniciado2) {
        unsigned long tiempoTranscurrido2 = millis() - inicio;
        unsigned long intervalos2 = millis() - inicio; // Corrige 'incio' a 'inicio'
        
        if (intervalos2 >= 1000) { // Cambia a >= para evitar problemas de sincronización
            int segundos = intervalos2 / 1000;
            velocidad -= 0.000350;
            intervalos2 = millis() - inicio; // Reinicia el intervalo
        }
        
        seconds += tiempoTranscurrido2 / 1000; // Convierte a segundos
    }

    Serial.print("Tiempo transcurrido: ");
    Serial.print(seconds);
    Serial.println(" segundos");

    float distancia = velocidad * seconds;

    // Modificar posicionX para ser negativa si se activa en2 y en3
    if (digitalRead(en3) > 0 && digitalRead(en2) > 0) {
        posicionX = -distancia; // Hacer que la posición X sea negativa
    } else {
        posicionX = distancia; // Mantener la posición X positiva para otras condiciones
    }

    // Imprimir la posición actual en el eje Z y X
    Serial.print("Posición Z actual: ");
    Serial.print(Z2);
    Serial.print(" grados");
    Serial.print(" gz: "); Serial.println(gz);
    Serial.print("gz_deg: "); Serial.println(gz_deg);
    
    Serial.print(" Posición X actual: ");
    Serial.print(posicionX);
    Serial.println(" m");

    SerialBT.print(" Posición Z actual: ");
    SerialBT.print(Z2);
    SerialBT.print(" grados");
    
    SerialBT.print(" Posición X actual: ");
    SerialBT.print(posicionX);
    SerialBT.println(" m");
}

// Estructura para almacenar puntos
typedef struct {
    float x;
    float z;
} Punto;

Punto puntos[4]; // Máximo de 4 puntos
int numPuntos = 0; // Contador de puntos válidos

bool seHanRecibidoCoordenadas = false;

void recibirRuta() {
    if (SerialBT.available() > 0) {
        numPuntos = 0; // Resetear contador al recibir nueva ruta
        
        for (int i = 0; i < 4; i++) {
            float tempX = SerialBT.parseFloat();
            float tempZ = SerialBT.parseFloat();
            
            if (tempX != 0.0 || tempZ != 0.0 || numPuntos == 0) { // Permitir que la primera coordenada sea (0,0)
                puntos[numPuntos].x = tempX;
                puntos[numPuntos].z = tempZ;
                numPuntos++;
            
                if (numPuntos > 0) {
                    seHanRecibidoCoordenadas = true; // Indicar que se han recibido coordenadas
                    Serial.println("Coordenadas recibidas.");
                    Serial.print("Coordenada X: ");Serial.print(puntos[numPuntos - 1].x);
                    Serial.print(" Coordenada Z: ");Serial.println(puntos[numPuntos - 1].z);
                    SerialBT.println("Coordenadas recibidas.");
                    SerialBT.print("Coordenada X: ");SerialBT.print(puntos[numPuntos - 1].x);
                    SerialBT.print(" Coordenada Z: ");SerialBT.println(puntos[numPuntos - 1].z);
                }
            }
        }
    }
}

void seguirRuta(float rotacionZ, float desplazamientoX) {
    posicion();

    // Verificar si la distancia es adecuada
    if (!verificarDistancia()) {
        Serial.println("Distancia fuera del rango permitido. Deteniendo el robot.");
        // Detener motores
        digitalWrite(en1, LOW);
        digitalWrite(en2, LOW);
        digitalWrite(en3, LOW);
        digitalWrite(en4, LOW);
        return; // Salir de la función si la distancia no es adecuada
    }
     
    if(Z2 != rotacionZ){
      if(rotacionZ <= -1.0){
            digitalWrite(en2, HIGH);
            digitalWrite(en4, HIGH);
    } 
    else if(rotacionZ >= 1.0){
      digitalWrite(en1, HIGH);
      digitalWrite(en3, HIGH);
    }
    else{
      digitalWrite(en1, LOW);
        digitalWrite(en2, LOW);
        digitalWrite(en3, LOW);
        digitalWrite(en4, LOW);
    }
    }
    delay(10);
    if(posicionX != desplazamientoX){
      if(desplazamientoX <= -1.0){
        digitalWrite(en2, HIGH);
        digitalWrite(en3, HIGH);
      }
      else if(desplazamientoX >= 1.0){
        digitalWrite(en1, HIGH);
        digitalWrite(en4, HIGH);
      }
      else{
        digitalWrite(en1, LOW);
        digitalWrite(en2, LOW);
        digitalWrite(en3, LOW);
        digitalWrite(en4, LOW);
      }
    }
    delay(10);

}

void setup() {
    Serial.begin(9600);
    SerialBT.begin("ESP32");
    Wire.begin();
    
    sensor.initialize();
    
    if (sensor.testConnection()) {
        Serial.println("Sensor iniciado correctamente");
        sensor.getRotation(&gy,&gx,&gz);
    } else {
        Serial.println("Error al iniciar el sensor");
    }

    pinMode(en1, OUTPUT);
    pinMode(en2, OUTPUT);
    pinMode(en3, OUTPUT);
    pinMode(en4, OUTPUT);
    digitalWrite(en1, 124);
    digitalWrite(en2, 124);
    digitalWrite(en3, 124);
    digitalWrite(en4, 124);

    pinMode(trig, OUTPUT);
    pinMode(echo, INPUT);

    // Detener motores si no hay desplazamiento
    digitalWrite(en1, LOW);
    digitalWrite(en2, LOW);
    digitalWrite(en3, LOW);
    digitalWrite(en4, LOW); 
}


void loop() {    
  posicion();
    recibirRuta(); // Comprobar si hay nuevos puntos de ruta
    
    if(seHanRecibidoCoordenadas){
        for (int i = 0; i < numPuntos; i++) {
            seguirRuta(puntos[i].x - posicionX , puntos[i].z - Z2); // Seguir cada punto de la ruta
            delay(100); // Esperar un poco antes del siguiente ciclo 
        }
   }
}










